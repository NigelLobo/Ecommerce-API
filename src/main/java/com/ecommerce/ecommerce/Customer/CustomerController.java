// package com.ecommerce.ecommerce.Customer;

// import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.http.HttpStatus;
// import org.springframework.http.ResponseEntity;
// import org.springframework.stereotype.Controller;
// import org.springframework.web.bind.annotation.DeleteMapping;
// import org.springframework.web.bind.annotation.GetMapping;
// import org.springframework.web.bind.annotation.PathVariable;
// import org.springframework.web.bind.annotation.PostMapping;
// import org.springframework.web.bind.annotation.PutMapping;
// import org.springframework.web.bind.annotation.RequestBody;
// import org.springframework.web.bind.annotation.RequestMapping;
// import org.springframework.web.bind.annotation.RequestParam;
// import org.springframework.web.bind.annotation.ResponseBody;

// @Controller // This means that this class is a Controller
// @RequestMapping(path = "/customer") // This means URL's start with /demo (after Application path)
// public class CustomerController {
//     @Autowired // This means to get the bean called customerRepository
//     // Which is auto-generated by Spring, we will use it to handle the data
//     private CustomerRepository customerRepository;

//     @PostMapping(path = "") // Map ONLY POST Requests
//     // TODO CHANGE FROM QUERY PARAM TO BE IN THE REQ BODY!!
//     public @ResponseBody ResponseEntity<String> addNewCustomer(@RequestParam String name, @RequestParam String email,
//             @RequestParam String password) {
//         try {
//             // Customer n = new Customer(name, email, password);
//             Customer n = new Customer(); // should have SOME ERROR HANDLING //TODO
//             n.setName(name);
//             n.setEmail(email);
//             n.setPassword(password);
//             customerRepository.save(n);
//             return ResponseEntity.status(HttpStatus.CREATED).body("Customer creation success.");
//         } catch (Exception e) {
//             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Customer creation failed.");
//         }
//     }

//     @GetMapping(path = "")
//     public @ResponseBody Iterable<Customer> getAllCustomers() {
//         // This returns a JSON or XML with the customers
//         return customerRepository.findAll();
//     }

//     @GetMapping(path = "/{email}")
//     public @ResponseBody Iterable<Customer> getCustomerByEmail(@PathVariable String email) {
//         // This returns a JSON or XML with the given email
//         return customerRepository.findByEmail(email);
//     }

//     @PutMapping(path = "/{email}")
//     public @ResponseBody ResponseEntity<String> updateCustomer(@PathVariable String email) {
//         return ResponseEntity.status(HttpStatus.OK).body("");
//     }

//     @DeleteMapping(path = "/{email}")
//     public @ResponseBody ResponseEntity<String> deleteCustomer(@PathVariable String email) {
//         try {
//             long recordsDeleted = customerRepository.deleteByEmail(email);
//             if (recordsDeleted == 1)
//                 return ResponseEntity.status(HttpStatus.OK).body("Delete Customer success.");
//             else
//                 return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Customer does not exist.");
//         } catch (Exception e) {
//             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.toString());
//         }
//     }

// }