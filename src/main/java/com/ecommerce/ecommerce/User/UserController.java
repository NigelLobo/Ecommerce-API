package com.ecommerce.ecommerce.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "") // Map ONLY POST Requests
    // TODO CHANGE FROM QUERY PARAM TO BE IN THE REQ BODY!!
    public @ResponseBody ResponseEntity<String> addNewUser(@RequestParam String name, @RequestParam String email,
            @RequestParam String password) {
        try {
            // User n = new User(name, email, password);
            User n = new User(); // should have SOME ERROR HANDLING //TODO
            n.setName(name);
            n.setEmail(email);
            n.setPassword(password);
            userRepository.save(n);
            return ResponseEntity.status(HttpStatus.CREATED).body("User creation success.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User creation failed.");
        }
    }

    @GetMapping(path = "")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/{email}")
    public @ResponseBody Iterable<User> getUserByEmail(@PathVariable String email) {
        // This returns a JSON or XML with the given email
        return userRepository.findByEmail(email);
    }

    @PutMapping(path = "/{email}")
    public @ResponseBody ResponseEntity<String> updateUser(@PathVariable String email) {
        return ResponseEntity.status(HttpStatus.OK).body("");
    }

    @DeleteMapping(path = "/{email}")
    public @ResponseBody ResponseEntity<String> deleteUser(@PathVariable String email) {
        try {
            long recordsDeleted = userRepository.deleteByEmail(email);
            if (recordsDeleted == 1)
                return ResponseEntity.status(HttpStatus.OK).body("Delete User success.");
            else
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User does not exist.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.toString());
        }
    }

}